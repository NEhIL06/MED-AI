!pip install numpy
!pip install pandas
!pip install matplotlib
!pip install opencv-python
!pip install tensorflow
import tensorflow as tf
import cv2
import os
from PIL import Image
import numpy as np
from keras.utils import to_categorical

image_directory='dataset/'
no_tumor_images=os.listdir(image_directory+'no/')

print(no_tumor_images)
path='no0.jpg'
print(path.split('.')[1])

dataset=[]
label=[]
INPUT_SIZE=(64, 64)

yes_tumor_images=os.listdir(image_directory+'yes/')

print(yes_tumor_images)
print(no_tumor_images)

for i, image_name in enumerate(no_tumor_images):
    if (image_name.split('.')[1] == 'jpg'):
        image = cv2.imread(image_directory + 'no/' + image_name)
        image = Image.fromarray(image, 'RGB')
        image = image.resize((INPUT_SIZE[0], INPUT_SIZE[1]))  # corrected resize arguments
        dataset.append(np.array(image))
        label.append(0)

for i, image_name in enumerate(yes_tumor_images):
    if (image_name.split('.')[1] == 'jpg'):
        image = cv2.imread(image_directory + 'yes/' + image_name)
        image = Image.fromarray(image, 'RGB')
        image = image.resize((INPUT_SIZE[0], INPUT_SIZE[1]))  # corrected resize arguments
        dataset.append(np.array(image))
        label.append(1)

print(dataset)
print(len(label))

from sklearn.model_selection import train_test_split
dataset=np.array(dataset)
label=np.array(label)
x_train,x_test,y_train,y_test=train_test_split(dataset,label,test_size=0.2,random_state=0)

print(x_train.shape)
print(y_train.shape)

print(x_test.shape)
print(y_test.shape)


from tensorflow import keras
from keras.utils import normalize
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Activation,Dropout,Flatten,Dense

x_train=normalize(x_train, axis=1)
x_test=normalize(x_test, axis=1)

y_train=to_categorical(y_train, num_classes=2)
y_test=to_categorical(y_test, num_classes=2)

print(x_test.shape)
print(y_test.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, Activation, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Define the model
model = Sequential()

# First Conv2D layer with input shape specified
model.add(Conv2D(32, (3, 3), input_shape=(INPUT_SIZE[0], INPUT_SIZE[1], 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Second Conv2D layer
model.add(Conv2D(32, (3, 3), kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Third Conv2D layer
model.add(Conv2D(32, (3, 3), kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Flatten layer to reshape the output
model.add(Flatten())

# Fully connected layer
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))

# Output layer
model.add(Dense(2))
model.add(Activation('softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Fit the model
model.fit(x_train, y_train, batch_size=16, verbose=1, epochs=10, validation_data=(x_test, y_test), shuffle=False)

# Save the model
model.save('BrainTumor10EpochsCategorical.h5')
